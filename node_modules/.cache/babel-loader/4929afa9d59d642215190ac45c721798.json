{"ast":null,"code":"import { createApi } from '@reduxjs/toolkit/query/react';\nimport { baseQuery } from './baseQuery';\nimport { boardsApi } from './boardsSlice';\nexport const columnsApi = createApi({\n  reducerPath: 'columnsApi',\n  baseQuery: baseQuery,\n  tagTypes: ['Columns'],\n  endpoints: build => ({\n    getColumn: build.query({\n      query: columnId => ({\n        url: `/api/columns/${columnId}`,\n        method: 'GET'\n      }),\n      providesTags: ['Columns']\n    }),\n    createColumn: build.mutation({\n      query: _ref => {\n        let {\n          column,\n          boardId\n        } = _ref;\n        return {\n          url: `/api/columns/${boardId}`,\n          method: 'POST',\n          body: column\n        };\n      },\n      invalidatesTags: ['Columns'],\n      onQueryStarted: async (arg, _ref2) => {\n        let {\n          dispatch,\n          queryFulfilled\n        } = _ref2;\n        const {\n          data\n        } = await queryFulfilled;\n        if (data) {\n          dispatch(boardsApi.util.invalidateTags(['Board']));\n        }\n      }\n    }),\n    updateColumn: build.mutation({\n      query: _ref3 => {\n        let {\n          column,\n          columnId\n        } = _ref3;\n        return {\n          url: `/api/columns/${columnId}`,\n          method: 'PATCH',\n          body: column\n        };\n      },\n      onQueryStarted: async (arg, _ref4) => {\n        let {\n          dispatch,\n          queryFulfilled\n        } = _ref4;\n        const {\n          data\n        } = await queryFulfilled;\n        if (data) {\n          dispatch(boardsApi.util.invalidateTags(['Board']));\n        }\n      }\n    }),\n    deleteColumn: build.mutation({\n      query: _ref5 => {\n        let {\n          columnId\n        } = _ref5;\n        return {\n          url: `/api/columns/${columnId}`,\n          method: 'DELETE'\n        };\n      },\n      invalidatesTags: ['Columns'],\n      onQueryStarted: async (arg, _ref6) => {\n        let {\n          dispatch,\n          queryFulfilled\n        } = _ref6;\n        const {\n          data\n        } = await queryFulfilled;\n        if (data) {\n          dispatch(boardsApi.util.invalidateTags(['Board']));\n        }\n      }\n    })\n  })\n});\nexport const {\n  useGetColumnQuery,\n  useCreateColumnMutation,\n  useUpdateColumnMutation,\n  useDeleteColumnMutation\n} = columnsApi;","map":{"version":3,"names":["createApi","baseQuery","boardsApi","columnsApi","reducerPath","tagTypes","endpoints","build","getColumn","query","columnId","url","method","providesTags","createColumn","mutation","_ref","column","boardId","body","invalidatesTags","onQueryStarted","arg","_ref2","dispatch","queryFulfilled","data","util","invalidateTags","updateColumn","_ref3","_ref4","deleteColumn","_ref5","_ref6","useGetColumnQuery","useCreateColumnMutation","useUpdateColumnMutation","useDeleteColumnMutation"],"sources":["/Users/vlasvin/Documents/GitHub/TaskPro-FrontEnd-Team5/src/store/columnsSlice.js"],"sourcesContent":["import { createApi } from '@reduxjs/toolkit/query/react';\nimport { baseQuery } from './baseQuery';\nimport { boardsApi } from './boardsSlice';\n\nexport const columnsApi = createApi({\n  reducerPath: 'columnsApi',\n  baseQuery: baseQuery,\n  tagTypes: ['Columns'],\n  endpoints: build => ({\n    getColumn: build.query({\n      query: columnId => ({ url: `/api/columns/${columnId}`, method: 'GET' }),\n      providesTags: ['Columns'],\n    }),\n    createColumn: build.mutation({\n      query: ({ column, boardId }) => ({\n        url: `/api/columns/${boardId}`,\n        method: 'POST',\n        body: column,\n      }),\n      invalidatesTags: ['Columns'],\n      onQueryStarted: async (arg, { dispatch, queryFulfilled }) => {\n        const { data } = await queryFulfilled;\n        if (data) {\n          dispatch(boardsApi.util.invalidateTags(['Board']));\n        }\n      },\n    }),\n    updateColumn: build.mutation({\n      query: ({ column, columnId }) => ({\n        url: `/api/columns/${columnId}`,\n        method: 'PATCH',\n        body: column,\n      }),\n      onQueryStarted: async (arg, { dispatch, queryFulfilled }) => {\n        const { data } = await queryFulfilled;\n        if (data) {\n          dispatch(boardsApi.util.invalidateTags(['Board']));\n        }\n      },\n    }),\n    deleteColumn: build.mutation({\n      query: ({ columnId }) => ({\n        url: `/api/columns/${columnId}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['Columns'],\n      onQueryStarted: async (arg, { dispatch, queryFulfilled }) => {\n        const { data } = await queryFulfilled;\n        if (data) {\n          dispatch(boardsApi.util.invalidateTags(['Board']));\n        }\n      },\n    }),\n  }),\n});\n\nexport const {\n  useGetColumnQuery,\n  useCreateColumnMutation,\n  useUpdateColumnMutation,\n  useDeleteColumnMutation,\n} = columnsApi;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,8BAA8B;AACxD,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,SAAS,QAAQ,eAAe;AAEzC,OAAO,MAAMC,UAAU,GAAGH,SAAS,CAAC;EAClCI,WAAW,EAAE,YAAY;EACzBH,SAAS,EAAEA,SAAS;EACpBI,QAAQ,EAAE,CAAC,SAAS,CAAC;EACrBC,SAAS,EAAEC,KAAK,KAAK;IACnBC,SAAS,EAAED,KAAK,CAACE,KAAK,CAAC;MACrBA,KAAK,EAAEC,QAAQ,KAAK;QAAEC,GAAG,EAAG,gBAAeD,QAAS,EAAC;QAAEE,MAAM,EAAE;MAAM,CAAC,CAAC;MACvEC,YAAY,EAAE,CAAC,SAAS;IAC1B,CAAC,CAAC;IACFC,YAAY,EAAEP,KAAK,CAACQ,QAAQ,CAAC;MAC3BN,KAAK,EAAEO,IAAA;QAAA,IAAC;UAAEC,MAAM;UAAEC;QAAQ,CAAC,GAAAF,IAAA;QAAA,OAAM;UAC/BL,GAAG,EAAG,gBAAeO,OAAQ,EAAC;UAC9BN,MAAM,EAAE,MAAM;UACdO,IAAI,EAAEF;QACR,CAAC;MAAA,CAAC;MACFG,eAAe,EAAE,CAAC,SAAS,CAAC;MAC5BC,cAAc,EAAE,MAAAA,CAAOC,GAAG,EAAAC,KAAA,KAAmC;QAAA,IAAjC;UAAEC,QAAQ;UAAEC;QAAe,CAAC,GAAAF,KAAA;QACtD,MAAM;UAAEG;QAAK,CAAC,GAAG,MAAMD,cAAc;QACrC,IAAIC,IAAI,EAAE;UACRF,QAAQ,CAACtB,SAAS,CAACyB,IAAI,CAACC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACpD;MACF;IACF,CAAC,CAAC;IACFC,YAAY,EAAEtB,KAAK,CAACQ,QAAQ,CAAC;MAC3BN,KAAK,EAAEqB,KAAA;QAAA,IAAC;UAAEb,MAAM;UAAEP;QAAS,CAAC,GAAAoB,KAAA;QAAA,OAAM;UAChCnB,GAAG,EAAG,gBAAeD,QAAS,EAAC;UAC/BE,MAAM,EAAE,OAAO;UACfO,IAAI,EAAEF;QACR,CAAC;MAAA,CAAC;MACFI,cAAc,EAAE,MAAAA,CAAOC,GAAG,EAAAS,KAAA,KAAmC;QAAA,IAAjC;UAAEP,QAAQ;UAAEC;QAAe,CAAC,GAAAM,KAAA;QACtD,MAAM;UAAEL;QAAK,CAAC,GAAG,MAAMD,cAAc;QACrC,IAAIC,IAAI,EAAE;UACRF,QAAQ,CAACtB,SAAS,CAACyB,IAAI,CAACC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACpD;MACF;IACF,CAAC,CAAC;IACFI,YAAY,EAAEzB,KAAK,CAACQ,QAAQ,CAAC;MAC3BN,KAAK,EAAEwB,KAAA;QAAA,IAAC;UAAEvB;QAAS,CAAC,GAAAuB,KAAA;QAAA,OAAM;UACxBtB,GAAG,EAAG,gBAAeD,QAAS,EAAC;UAC/BE,MAAM,EAAE;QACV,CAAC;MAAA,CAAC;MACFQ,eAAe,EAAE,CAAC,SAAS,CAAC;MAC5BC,cAAc,EAAE,MAAAA,CAAOC,GAAG,EAAAY,KAAA,KAAmC;QAAA,IAAjC;UAAEV,QAAQ;UAAEC;QAAe,CAAC,GAAAS,KAAA;QACtD,MAAM;UAAER;QAAK,CAAC,GAAG,MAAMD,cAAc;QACrC,IAAIC,IAAI,EAAE;UACRF,QAAQ,CAACtB,SAAS,CAACyB,IAAI,CAACC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACpD;MACF;IACF,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EACXO,iBAAiB;EACjBC,uBAAuB;EACvBC,uBAAuB;EACvBC;AACF,CAAC,GAAGnC,UAAU"},"metadata":{},"sourceType":"module"}