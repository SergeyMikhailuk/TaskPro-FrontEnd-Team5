{"ast":null,"code":"import { createApi } from '@reduxjs/toolkit/query/react';\nimport { baseQuery } from './baseQuery';\nexport const boardsApi = createApi({\n  reducerPath: 'boardsApi',\n  baseQuery: baseQuery,\n  tagTypes: ['Board', 'Boards'],\n  endpoints: build => ({\n    getBoards: build.query({\n      query: () => '/api/boards',\n      providesTags: ['Boards']\n    }),\n    getBoardById: build.query({\n      query: boardId => boardId ? `/api/boards/${boardId}` : ``,\n      providesTags: (result, error, boardId) => [{\n        type: 'Board',\n        id: boardId\n      }]\n    }),\n    createBoard: build.mutation({\n      query: board => ({\n        url: '/api/boards',\n        method: 'POST',\n        body: board\n      }),\n      invalidatesTags: ['Boards']\n    }),\n    updateBoard: build.mutation({\n      query: _ref => {\n        let {\n          boardId,\n          updatedBoard\n        } = _ref;\n        return {\n          url: `/api/boards/${boardId}`,\n          method: 'PATCH',\n          body: updatedBoard\n        };\n      },\n      invalidatesTags: (result, error, _ref2) => {\n        let {\n          boardId\n        } = _ref2;\n        return [{\n          type: 'Board',\n          id: boardId\n        }, {\n          type: 'Boards'\n        }];\n      }\n    }),\n    deleteBoard: build.mutation({\n      query: _ref3 => {\n        let {\n          boardId\n        } = _ref3;\n        return {\n          url: `/api/boards/${boardId}`,\n          method: 'DELETE'\n        };\n      },\n      invalidatesTags: ['Boards']\n    })\n  })\n});\nexport const {\n  useGetBoardsQuery,\n  useGetBoardByIdQuery,\n  useCreateBoardMutation,\n  useUpdateBoardMutation,\n  useDeleteBoardMutation\n} = boardsApi;","map":{"version":3,"names":["createApi","baseQuery","boardsApi","reducerPath","tagTypes","endpoints","build","getBoards","query","providesTags","getBoardById","boardId","result","error","type","id","createBoard","mutation","board","url","method","body","invalidatesTags","updateBoard","_ref","updatedBoard","_ref2","deleteBoard","_ref3","useGetBoardsQuery","useGetBoardByIdQuery","useCreateBoardMutation","useUpdateBoardMutation","useDeleteBoardMutation"],"sources":["/Users/vlasvin/Documents/GitHub/TaskPro-FrontEnd-Team5/src/store/boardsSlice.js"],"sourcesContent":["import { createApi } from '@reduxjs/toolkit/query/react';\nimport { baseQuery } from './baseQuery';\n\nexport const boardsApi = createApi({\n  reducerPath: 'boardsApi',\n  baseQuery: baseQuery,\n\n  tagTypes: ['Board', 'Boards'],\n  endpoints: build => ({\n    getBoards: build.query({\n      query: () => '/api/boards',\n      providesTags: ['Boards'],\n    }),\n    getBoardById: build.query({\n      query: boardId => (boardId ? `/api/boards/${boardId}` : ``),\n      providesTags: (result, error, boardId) => [\n        { type: 'Board', id: boardId },\n      ],\n    }),\n    createBoard: build.mutation({\n      query: board => ({\n        url: '/api/boards',\n        method: 'POST',\n        body: board,\n      }),\n      invalidatesTags: ['Boards'],\n    }),\n    updateBoard: build.mutation({\n      query: ({ boardId, updatedBoard }) => ({\n        url: `/api/boards/${boardId}`,\n        method: 'PATCH',\n        body: updatedBoard,\n      }),\n      invalidatesTags: (result, error, { boardId }) => [\n        { type: 'Board', id: boardId },\n        { type: 'Boards' },\n      ],\n    }),\n    deleteBoard: build.mutation({\n      query: ({ boardId }) => ({\n        url: `/api/boards/${boardId}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['Boards'],\n    }),\n  }),\n});\n\nexport const {\n  useGetBoardsQuery,\n  useGetBoardByIdQuery,\n  useCreateBoardMutation,\n  useUpdateBoardMutation,\n  useDeleteBoardMutation,\n} = boardsApi;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,8BAA8B;AACxD,SAASC,SAAS,QAAQ,aAAa;AAEvC,OAAO,MAAMC,SAAS,GAAGF,SAAS,CAAC;EACjCG,WAAW,EAAE,WAAW;EACxBF,SAAS,EAAEA,SAAS;EAEpBG,QAAQ,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC;EAC7BC,SAAS,EAAEC,KAAK,KAAK;IACnBC,SAAS,EAAED,KAAK,CAACE,KAAK,CAAC;MACrBA,KAAK,EAAEA,CAAA,KAAM,aAAa;MAC1BC,YAAY,EAAE,CAAC,QAAQ;IACzB,CAAC,CAAC;IACFC,YAAY,EAAEJ,KAAK,CAACE,KAAK,CAAC;MACxBA,KAAK,EAAEG,OAAO,IAAKA,OAAO,GAAI,eAAcA,OAAQ,EAAC,GAAI,EAAE;MAC3DF,YAAY,EAAEA,CAACG,MAAM,EAAEC,KAAK,EAAEF,OAAO,KAAK,CACxC;QAAEG,IAAI,EAAE,OAAO;QAAEC,EAAE,EAAEJ;MAAQ,CAAC;IAElC,CAAC,CAAC;IACFK,WAAW,EAAEV,KAAK,CAACW,QAAQ,CAAC;MAC1BT,KAAK,EAAEU,KAAK,KAAK;QACfC,GAAG,EAAE,aAAa;QAClBC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACR,CAAC,CAAC;MACFI,eAAe,EAAE,CAAC,QAAQ;IAC5B,CAAC,CAAC;IACFC,WAAW,EAAEjB,KAAK,CAACW,QAAQ,CAAC;MAC1BT,KAAK,EAAEgB,IAAA;QAAA,IAAC;UAAEb,OAAO;UAAEc;QAAa,CAAC,GAAAD,IAAA;QAAA,OAAM;UACrCL,GAAG,EAAG,eAAcR,OAAQ,EAAC;UAC7BS,MAAM,EAAE,OAAO;UACfC,IAAI,EAAEI;QACR,CAAC;MAAA,CAAC;MACFH,eAAe,EAAEA,CAACV,MAAM,EAAEC,KAAK,EAAAa,KAAA;QAAA,IAAE;UAAEf;QAAQ,CAAC,GAAAe,KAAA;QAAA,OAAK,CAC/C;UAAEZ,IAAI,EAAE,OAAO;UAAEC,EAAE,EAAEJ;QAAQ,CAAC,EAC9B;UAAEG,IAAI,EAAE;QAAS,CAAC,CACnB;MAAA;IACH,CAAC,CAAC;IACFa,WAAW,EAAErB,KAAK,CAACW,QAAQ,CAAC;MAC1BT,KAAK,EAAEoB,KAAA;QAAA,IAAC;UAAEjB;QAAQ,CAAC,GAAAiB,KAAA;QAAA,OAAM;UACvBT,GAAG,EAAG,eAAcR,OAAQ,EAAC;UAC7BS,MAAM,EAAE;QACV,CAAC;MAAA,CAAC;MACFE,eAAe,EAAE,CAAC,QAAQ;IAC5B,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EACXO,iBAAiB;EACjBC,oBAAoB;EACpBC,sBAAsB;EACtBC,sBAAsB;EACtBC;AACF,CAAC,GAAG/B,SAAS"},"metadata":{},"sourceType":"module"}